From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Mon, 29 Feb 2016 20:40:33 -0600
Subject: [PATCH] Build Changes


diff --git a/build.gradle.kts b/build.gradle.kts
index 73df2d0ded415fc718ffb1ef7ca63fc9b9fc7ecd..d85c5c690e777de582b102d0daf2b91a9f00dbdc 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,5 +1,7 @@
 import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
-import java.time.Instant
+import io.papermc.paperweight.util.Git
+import java.text.SimpleDateFormat
+import java.util.Date
 
 plugins {
     java
@@ -15,39 +17,72 @@ repositories {
 dependencies {
     implementation(project(":Paper-API"))
     implementation("jline:jline:2.12.1")
-    implementation("org.apache.logging.log4j:log4j-iostreams:2.8.1")
+
+    implementation(platform("org.apache.logging.log4j:log4j-bom:2.11.2"))
+    implementation(project(":Paper-MojangAPI"))
+
+    implementation("org.apache.logging.log4j:log4j-api")
+    implementation("org.apache.logging.log4j:log4j-iostreams")
+
+    // wrapper to use either java 8 sun cleaner or java9+ official cleaner
+    implementation("co.aikar:cleaner:1.0-SNAPSHOT")
+    implementation("io.netty:netty-all:4.1.50.Final")
+
     implementation("org.ow2.asm:asm:9.1")
     implementation("com.googlecode.json-simple:json-simple:1.1.1") {
         // This includes junit transitively for whatever reason
         isTransitive = false
     }
     runtimeOnly("org.xerial:sqlite-jdbc:3.34.0")
-    runtimeOnly("mysql:mysql-connector-java:5.1.49")
+    runtimeOnly("mysql:mysql-connector-java:8.0.23")
     testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
 }
 
+val gitHashFile = layout.buildDirectory.file("git-hash/git-hash.txt")
+val gitHash by tasks.registering(Task::class) {
+    val rootDir = rootProject.layout.projectDirectory
+    inputs.file(rootDir)
+            .withPropertyName("inputDir")
+            .withPathSensitivity(PathSensitivity.ABSOLUTE)
+
+    outputs.file(gitHashFile).withPropertyName("outputFile")
+
+    outputs.upToDateWhen { false }
+
+    doLast {
+        val outFile = gitHashFile.get().asFile
+        outFile.parentFile.mkdirs()
+        outFile.writeText(Git(rootDir.asFile)("log", "--pretty=format:\"%h\"").getText().trim())
+    }
+}
+
 tasks.jar {
-    manifest {
-        attributes(mapOf(
-            "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "CraftBukkit",
-            "Implementation-Vendor" to Instant.now().epochSecond,
-            "Specification-Title" to "Bukkit",
-            "Specification-Version" to project.version,
-            "Specification-Vendor" to "Bukkit Team"
-        ))
-        for (tld in listOf("net", "com", "org")) {
+    dependsOn(gitHash)
+
+    doFirst {
+        manifest {
             attributes(mapOf(
-                "Sealed" to "true"
-            ), "$tld/bukkit")
+                    "Main-Class" to "org.bukkit.craftbukkit.Main",
+                    "Implementation-Title" to "CraftBukkit",
+                    "Implementation-Version" to "git-Paper-${gitHashFile.get().asFile.readText().trim()}",
+                    "Implementation-Vendor" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").format(Date()),
+                    "Specification-Title" to "Bukkit",
+                    "Specification-Version" to project.version,
+                    "Specification-Vendor" to "Bukkit Team"
+            ))
+            for (tld in listOf("net", "com", "org")) {
+                attributes(mapOf(
+                        "Sealed" to "true"
+                ), "$tld/bukkit")
+            }
         }
     }
 }
 
 tasks.shadowJar {
     listOf(
-        "jline", "it.unimi", "org.apache.commons.codec", "org.apache.commons.io",
+        "jline", "org.apache.commons.codec", "org.apache.commons.io",
         "org.apache.commons.lang3", "org.objectweb.asm"
     ).forEach { pack ->
         relocate(pack, "org.bukkit.craftbukkit.libs.$pack")
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 8d81cc81dfcd05fc58503f90f4bc700525695151..d074f25c95665a3ccb8dc2af8a2424f1341ab27b 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -186,7 +186,7 @@ public class Main {
                 }
 
                 if (Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
-                    Date buildDate = new Date(Integer.parseInt(Main.class.getPackage().getImplementationVendor()) * 1000L);
+                    Date buildDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse(Main.class.getPackage().getImplementationVendor()); // Paper
 
                     Calendar deadline = Calendar.getInstance();
                     deadline.add(Calendar.DAY_OF_YEAR, -28);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 93046379d0cefd5d3236fc59e698809acdc18f80..674096cab190d62622f9947853b056f57d43a2a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -11,7 +11,7 @@ public final class Versioning {
     public static String getBukkitVersion() {
         String result = "Unknown-Version";
 
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/org.spigotmc/spigot-api/pom.properties");
+        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/com.destroystokyo.paper/paper-api/pom.properties");
         Properties properties = new Properties();
 
         if (stream != null) {
