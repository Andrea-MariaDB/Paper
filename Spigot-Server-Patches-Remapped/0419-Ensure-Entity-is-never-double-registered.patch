From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 29 Mar 2020 18:26:14 -0400
Subject: [PATCH] Ensure Entity is never double registered

If something calls register twice, and the world is ticking, it could be
enqueued to add twice.

Vs behavior of non ticking of just overwriting state.

We will now simply log a warning when this happens instead of crashing the server.

diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 9a49d52d2636e6e70b5d4844f5f3021a637a4812..5d9866463fb8cc5aecb6d0ec23b33e73eebe66c7 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -643,6 +643,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             Entity entity2;
 
             while ((entity2 = (Entity) this.toAddAfterTick.poll()) != null) {
+                if (!entity2.isQueuedForRegister) continue; // Paper - ignore cancelled registers
                 this.add(entity2);
             }
 
@@ -1400,6 +1401,19 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
 
     public void onEntityRemoved(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+        // Paper start - fix entity registration issues
+        if (entity instanceof EnderDragonPart) {
+            // Usually this is a no-op for complex parts, and ID's should be removed, but go ahead and remove it anyways
+            // Dragon parts are handled special in register. they don't receive a valid = true or register by UUID etc.
+            this.entitiesById.remove(entity.getId(), entity);
+            return;
+        }
+        if (!entity.valid) {
+            // Someone called remove before we ever got added, cancel the add.
+            entity.isQueuedForRegister = false;
+            return;
+        }
+        // Paper end
         // Spigot start
         if ( entity instanceof Player )
         {
@@ -1466,9 +1480,21 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
 
     private void add(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
+        // Paper start - don't double enqueue entity registration
+        //noinspection ObjectEquality
+        if (this.entitiesById.get(entity.getId()) == entity) {
+            LOGGER.error(entity + " was already registered!");
+            new Throwable().printStackTrace();
+            return;
+        }
+        // Paper end
         if (this.tickingEntities) {
-            this.toAddAfterTick.add(entity);
+            if (!entity.isQueuedForRegister) { // Paper
+                this.toAddAfterTick.add(entity);
+                entity.isQueuedForRegister = true; // Paper
+            }
         } else {
+            entity.isQueuedForRegister = false; // Paper
             this.entitiesById.put(entity.getId(), entity);
             if (entity instanceof EnderDragon) {
                 EnderDragonPart[] aentitycomplexpart = ((EnderDragon) entity).getSubEntities();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4d5621eda1655b87a25c6eed2c9a3bd5915fa9f0..748257757cef78303ad19209c000e5096551f9ba 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -147,6 +147,7 @@ public abstract class Entity implements Nameable, CommandSource, net.minecraft.s
     }
 
     // Paper start
+    public boolean isQueuedForRegister = false;
     public static Random SHARED_RANDOM = new Random() {
         private boolean locked = false;
         @Override
