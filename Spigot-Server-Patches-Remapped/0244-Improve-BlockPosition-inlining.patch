From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 30 Nov 2016 20:56:58 -0600
Subject: [PATCH] Improve BlockPosition inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my microbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 6a58059a05e16d96894b67a544c2f595d9546c78..c5089b0da33a68e7cadbc4841b07f9d772d224a0 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -88,6 +88,7 @@ public class BlockPos extends Vec3i {
         return asLong(this.getX(), this.getY(), this.getZ());
     }
 
+    public static long asLong(int x, int y, int z) { return asLong(x, y, z); } // Paper - OBFHELPER
     public static long asLong(int x, int y, int z) {
         long l = 0L;
 
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index c22de593be404c4e921724bba6a69c13759a95fd..fc4e652ada7b228cb99a3c8fb372ae9af5ddfba4 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -41,7 +41,7 @@ public class Vec3i implements Comparable<Vec3i> {
         this(Mth.floor(x), Mth.floor(y), Mth.floor(z));
     }
 
-    public boolean equals(Object object) {
+    public final boolean equals(Object object) { // Paper
         if (this == object) {
             return true;
         } else if (!(object instanceof Vec3i)) {
@@ -53,7 +53,7 @@ public class Vec3i implements Comparable<Vec3i> {
         }
     }
 
-    public int hashCode() {
+    public final int hashCode() { // Paper
         return (this.getY() + this.getZ() * 31) * 31 + this.getX();
     }
 
@@ -61,15 +61,15 @@ public class Vec3i implements Comparable<Vec3i> {
         return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
     }
 
-    public int getX() {
+    public final int getX() { // Paper
         return this.x;
     }
 
-    public int getY() {
+    public final int getY() { // Paper
         return this.y;
     }
 
-    public int getZ() {
+    public final int getZ() { // Paper
         return this.z;
     }
 
