From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Fri, 3 Jul 2020 15:03:33 -0700
Subject: [PATCH] Improve EntityTargetLivingEntityEvent for 1.16 mobs

CraftBukkit has a bug in their implementation and is incorrectly handling forget
Also adds more target reasons for why it forgot target.

diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java b/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
index 738162a55eb186f66df4d31e017c9b9a7cc604c2..1b6f34c2a185368aac973e8a5316a03950e4314b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/StopAttackingIfTargetInvalid.java
@@ -33,15 +33,15 @@ public class StopAttackingIfTargetInvalid<E extends Mob> extends Behavior<E> {
 
     protected void start(ServerLevel world, E entity, long time) {
         if (isTiredOfTryingToReachTarget((LivingEntity) entity)) {
-            this.clearAttackTarget(entity);
+            this.d(entity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.FORGOT_TARGET); // Paper
         } else if (this.isCurrentTargetDeadOrRemoved(entity)) {
-            this.clearAttackTarget(entity);
+            this.d(entity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_DIED); // Paper
         } else if (this.isCurrentTargetInDifferentLevel(entity)) {
-            this.clearAttackTarget(entity);
+            this.d(entity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_OTHER_LEVEL); // Paper
         } else if (!EntitySelector.ATTACK_ALLOWED.test(this.getAttackTarget(entity))) {
-            this.clearAttackTarget(entity);
+            this.d(entity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_INVALID); // Paper
         } else if (this.stopAttackingWhen.test(this.getAttackTarget(entity))) {
-            this.clearAttackTarget(entity);
+            this.d(entity, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_INVALID); // Paper
         }
     }
 
@@ -65,18 +65,21 @@ public class StopAttackingIfTargetInvalid<E extends Mob> extends Behavior<E> {
         return optional.isPresent() && !((LivingEntity) optional.get()).isAlive();
     }
 
-    private void clearAttackTarget(E entity) {
+    private void d(E e0, EntityTargetEvent.TargetReason reason) {
         // CraftBukkit start
-        LivingEntity old = entity.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
-        EntityTargetEvent event = CraftEventFactory.callEntityTargetLivingEvent(entity, null, (old != null && !old.isAlive()) ? EntityTargetEvent.TargetReason.TARGET_DIED : EntityTargetEvent.TargetReason.FORGOT_TARGET);
+        // Paper start - fix this event
+        //EntityLiving old = e0.getBehaviorController().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
+        EntityTargetEvent event = CraftEventFactory.callEntityTargetLivingEvent(e0, null, reason);
         if (event.isCancelled()) {
             return;
         }
-        if (event.getTarget() != null) {
-            entity.getBrain().setMemory(MemoryModuleType.ATTACK_TARGET, ((CraftLivingEntity) event.getTarget()).getHandle());
+        // comment out, bad logic - bad
+        /*if (event.getTarget() != null) {
+            e0.getBehaviorController().setMemory(MemoryModuleType.ATTACK_TARGET, ((CraftLivingEntity) event.getTarget()).getHandle());
             return;
-        }
+        }*/
+        // Paper end
         // CraftBukkit end
-        entity.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
+        e0.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
     }
 }
